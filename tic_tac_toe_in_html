<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #2980b9 0%, #1e3c72 100%);
            color: white;
        }
        
        .game-container {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-gap: 10px;
            max-width: 300px;
            margin: 0 auto 30px;
            background: rgba(255, 255, 255, 0.2);
            padding: 15px;
            border-radius: 15px;
        }
        
        .cell {
            width: 80px;
            height: 80px;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 10px;
            font-size: 2em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            color: #333;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .cell:hover {
            background: rgba(255, 255, 255, 1);
            transform: scale(1.05);
        }
        
        .cell:disabled {
            cursor: not-allowed;
            opacity: 0.8;
        }
        
        .cell.x {
            color: #1a5490;
        }
        
        .cell.o {
            color: #0f4c75;
        }
        
        .status {
            font-size: 1.3em;
            margin-bottom: 20px;
            min-height: 30px;
            font-weight: bold;
        }
        
        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        button {
            padding: 12px 24px;
            font-size: 1em;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
        }
        
        .reset-btn {
            background: #34495e;
            color: white;
        }
        
        .reset-btn:hover {
            background: #2c3e50;
            transform: translateY(-2px);
        }
        
        .mode-btn {
            background: #3498db;
            color: white;
        }
        
        .mode-btn:hover {
            background: #2980b9;
            transform: translateY(-2px);
        }
        
        .winning-line {
            background: rgba(52, 152, 219, 0.3) !important;
            animation: pulse 0.5s ease-in-out;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        .instructions {
            margin-top: 20px;
            font-size: 0.9em;
            opacity: 0.6;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Tic Tac Toe</h1>
        <div class="status" id="status">Your turn! (X)</div>
        <div class="board" id="board">
            <button class="cell" onclick="makeMove(0)"></button>
            <button class="cell" onclick="makeMove(1)"></button>
            <button class="cell" onclick="makeMove(2)"></button>
            <button class="cell" onclick="makeMove(3)"></button>
            <button class="cell" onclick="makeMove(4)"></button>
            <button class="cell" onclick="makeMove(5)"></button>
            <button class="cell" onclick="makeMove(6)"></button>
            <button class="cell" onclick="makeMove(7)"></button>
            <button class="cell" onclick="makeMove(8)"></button>
        </div>
        <div class="controls">
            <button class="reset-btn" onclick="resetGame()">New Game</button>
            <button class="mode-btn" onclick="toggleMode()" id="modeBtn">Two Players</button>
        </div>
        <div class="instructions">Click "vs Computer" to play against AI, or "Two Players" for local multiplayer</div>
    </div>

    <script>
        // Game state
        let board = ['', '', '', '', '', '', '', '', ''];
        let currentPlayer = 'X';
        let gameActive = true;
        let vsComputer = true;
        
        // Win conditions - all possible winning combinations
        const winConditions = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
            [0, 4, 8], [2, 4, 6]             // diagonals
        ];
        
        const cells = document.querySelectorAll('.cell');
        const statusDisplay = document.getElementById('status');
        const modeBtn = document.getElementById('modeBtn');
        
        function makeMove(cellIndex) {
            // Move validation
            if (board[cellIndex] !== '' || !gameActive) {
                return;
            }
            
            // Place piece
            board[cellIndex] = currentPlayer;
            cells[cellIndex].textContent = currentPlayer;
            cells[cellIndex].classList.add(currentPlayer.toLowerCase());
            
            // Check for win or draw
            if (checkWin()) {
                gameActive = false;
                statusDisplay.textContent = `${currentPlayer} wins! üéâ`;
                highlightWinningLine();
                return;
            }
            
            if (checkDraw()) {
                gameActive = false;
                statusDisplay.textContent = "It's a draw! ü§ù";
                return;
            }
            
            // Switch players
            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
            
            if (vsComputer && currentPlayer === 'O') {
                statusDisplay.textContent = "Computer thinking...";
                setTimeout(() => {
                    computerMove();
                }, 500);
            } else {
                statusDisplay.textContent = `${currentPlayer === 'X' ? 'Your' : 'Player ' + currentPlayer + "'s"} turn! (${currentPlayer})`;
            }
        }
        
        function checkWin() {
            return winConditions.some(condition => {
                return condition.every(index => {
                    return board[index] === currentPlayer;
                });
            });
        }
        
        function checkDraw() {
            return board.every(cell => cell !== '');
        }
        
        function highlightWinningLine() {
            winConditions.forEach(condition => {
                if (condition.every(index => board[index] === currentPlayer)) {
                    condition.forEach(index => {
                        cells[index].classList.add('winning-line');
                    });
                }
            });
        }
        
        function computerMove() {
            if (!gameActive) return;
            
            let bestMove = getBestMove();
            
            if (bestMove !== -1) {
                board[bestMove] = 'O';
                cells[bestMove].textContent = 'O';
                cells[bestMove].classList.add('o');
                
                if (checkWin()) {
                    gameActive = false;
                    statusDisplay.textContent = "Computer wins! ü§ñ";
                    highlightWinningLine();
                    return;
                }
                
                if (checkDraw()) {
                    gameActive = false;
                    statusDisplay.textContent = "It's a draw! ü§ù";
                    return;
                }
                
                currentPlayer = 'X';
                statusDisplay.textContent = "Your turn! (X)";
            }
        }
        
        function getBestMove() {
            // 1. Win immediately if possible
            for (let i = 0; i < 9; i++) {
                if (board[i] === '') {
                    board[i] = 'O';
                    if (checkWin()) {
                        board[i] = '';
                        return i;
                    }
                    board[i] = '';
                }
            }
            
            // 2. Block opponent from winning
            for (let i = 0; i < 9; i++) {
                if (board[i] === '') {
                    board[i] = 'X';
                    if (checkWin()) {
                        board[i] = '';
                        return i;
                    }
                    board[i] = '';
                }
            }
            
            // 3. Take center if available
            if (board[4] === '') {
                return 4;
            }
            
            // 4. Take corners
            const corners = [0, 2, 6, 8];
            for (let corner of corners) {
                if (board[corner] === '') {
                    return corner;
                }
            }
            
            // 5. Take edges
            const edges = [1, 3, 5, 7];
            for (let edge of edges) {
                if (board[edge] === '') {
                    return edge;
                }
            }
            
            return -1;
        }
        
        function resetGame() {
            board = ['', '', '', '', '', '', '', '', ''];
            currentPlayer = 'X';
            gameActive = true;
            
            cells.forEach(cell => {
                cell.textContent = '';
                cell.classList.remove('x', 'o', 'winning-line');
            });
            
            statusDisplay.textContent = vsComputer ? "Your turn! (X)" : "Player X's turn!";
        }
        
        function toggleMode() {
            vsComputer = !vsComputer;
            modeBtn.textContent = vsComputer ? "Two Players" : "vs Computer";
            resetGame();
        }
    </script>
</body>
</html>
